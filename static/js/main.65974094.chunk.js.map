{"version":3,"sources":["components/GridBox/index.js","components/Grid/index.js","App.js","serviceWorker.js","index.js"],"names":["GridBox","style","height","width","borderColor","borderWidth","borderStyle","display","react_default","a","createElement","id","this","props","onClick","clicked","Component","Grid","state","score","i","length","alert","duplicateArray","slice","setState","shuffle","sort","Math","random","_this2","map","grid","index","components_GridBox","App","components_Grid","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+NAqBeA,6MAlBXC,MAAQ,CACJC,OAAQ,OACRC,MAAO,OACPC,YAAa,MACbC,YAAa,MACbC,YAAa,QACbC,QAAS,wFAIT,OACIC,EAAAC,EAAAC,cAAA,OAAKC,GAAMC,KAAKC,MAAMF,GAAIG,QAAWF,KAAKC,MAAME,QAASd,MAASW,KAAKX,eAZ7De,aC6GPC,6MA3GXC,MAAQ,CACJC,MAAO,EACPF,KAAM,CACF,CACIF,SAAS,EACTJ,GAAI,OAER,CACII,SAAS,EACTJ,GAAI,OAER,CACII,SAAS,EACTJ,GAAI,OAER,CACII,SAAS,EACTJ,GAAI,OAER,CACII,SAAS,EACTJ,GAAI,OAER,CACII,SAAS,EACTJ,GAAI,OAER,CACII,SAAS,EACTJ,GAAI,OAER,CACII,SAAS,EACTJ,GAAI,OAER,CACII,SAAS,EACTJ,GAAI,OAER,CACII,SAAS,EACTJ,GAAI,OAER,CACII,SAAS,EACTJ,GAAI,QAER,CACII,SAAS,EACTJ,GAAI,QAER,CACII,SAAS,EACTJ,GAAI,QAER,CACII,SAAS,EACTJ,GAAI,QAER,CACII,SAAS,EACTJ,GAAI,QAER,CACII,SAAS,EACTJ,GAAI,iFAKPA,GACL,IAAI,IAAIS,EAAI,EAAGA,EAAIR,KAAKM,MAAMD,KAAKI,OAAQD,IACvC,GAAGR,KAAKM,MAAMD,KAAKG,GAAGT,KAAOA,EACzB,IAAkC,IAA/BC,KAAKM,MAAMD,KAAKG,GAAGL,QAClBO,MAAM,gBACL,CACD,IAAIC,EAAiBX,KAAKM,MAAMD,KAAKO,MAAM,GAC3CD,EAAeH,GAAGL,SAAU,EAC5BH,KAAKa,SAAS,CAACR,KAAMM,IAIjCX,KAAKc,4CAIL,IAAIH,EAAiBX,KAAKM,MAAMD,KAAKU,KAAK,kBAAMC,KAAKC,SAAW,KAChEjB,KAAKa,SAAS,CAACR,KAAMM,qCAGf,IAAAO,EAAAlB,KACN,OACIJ,EAAAC,EAAAC,cAAA,OAAKC,GAAK,QAEFC,KAAKM,MAAMD,KAAKc,IAAI,SAACC,EAAMC,GACvB,OAAGA,EAAQ,IAAM,GAAe,IAAVA,EACXzB,EAAAC,EAAAC,cAAA,YAAMF,EAAAC,EAAAC,cAACwB,EAAD,CAASvB,GAAMmB,EAAKZ,MAAMD,KAAKgB,GAAOtB,GAAII,QAAS,kBAAKe,EAAKf,QAAQe,EAAKZ,MAAMD,KAAKgB,GAAOtB,OAAOH,EAAAC,EAAAC,cAAA,YAEzGF,EAAAC,EAAAC,cAAA,YAAMF,EAAAC,EAAAC,cAACwB,EAAD,CAASvB,GAAMmB,EAAKZ,MAAMD,KAAKgB,GAAOtB,GAAII,QAAS,kBAAKe,EAAKf,QAAQe,EAAKZ,MAAMD,KAAKgB,GAAOtB,kBAnGlHK,aCSJmB,MARf,WACE,OACE3B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC0B,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.65974094.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass GridBox extends Component{\r\n    style = {\r\n        height: \"60px\",\r\n        width: \"60px\",\r\n        borderColor: \"red\",\r\n        borderWidth: \"5px\",\r\n        borderStyle: \"solid\",\r\n        display: \"inline-block\"\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div id = {this.props.id} onClick = {this.props.clicked} style = {this.style}>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GridBox;","import React, {Component} from 'react';\r\nimport GridBox from '../GridBox/index'\r\n\r\nclass Grid extends Component {\r\n    state = {\r\n        score: 0,\r\n        Grid: [\r\n            {\r\n                clicked: false,\r\n                id: \"id0\",\r\n            },\r\n            {\r\n                clicked: false,\r\n                id: \"id1\"\r\n            },\r\n            {\r\n                clicked: false,\r\n                id: \"id2\"\r\n            },\r\n            {\r\n                clicked: false,\r\n                id: \"id3\"\r\n            },\r\n            {\r\n                clicked: false,\r\n                id: \"id4\"\r\n            },\r\n            {\r\n                clicked: false,\r\n                id: \"id5\"\r\n            },\r\n            {\r\n                clicked: false,\r\n                id: \"id6\"\r\n            },\r\n            {\r\n                clicked: false,\r\n                id: \"id7\"\r\n            },\r\n            {\r\n                clicked: false,\r\n                id: \"id8\"\r\n            },\r\n            {\r\n                clicked: false,\r\n                id: \"id9\"\r\n            },\r\n            {\r\n                clicked: false,\r\n                id: \"id10\"\r\n            },\r\n            {\r\n                clicked: false,\r\n                id: \"id11\"\r\n            },\r\n            {\r\n                clicked: false,\r\n                id: \"id12\"\r\n            },\r\n            {\r\n                clicked: false,\r\n                id: \"id13\"\r\n            },\r\n            {\r\n                clicked: false,\r\n                id: \"id14\"\r\n            },\r\n            {\r\n                clicked: false,\r\n                id: \"id15\"\r\n            },\r\n        ],\r\n    }\r\n\r\n    clicked (id) {\r\n        for(let i = 0; i < this.state.Grid.length; i++){\r\n            if(this.state.Grid[i].id === id){\r\n                if(this.state.Grid[i].clicked === true){\r\n                    alert(\"you lose\");\r\n                }else{\r\n                    let duplicateArray = this.state.Grid.slice(0);\r\n                    duplicateArray[i].clicked = true;\r\n                    this.setState({Grid: duplicateArray});\r\n                }\r\n            }\r\n        }\r\n        this.shuffle()\r\n    }\r\n\r\n    shuffle () {\r\n        let duplicateArray = this.state.Grid.sort(() => Math.random() - 0.5)\r\n        this.setState({Grid: duplicateArray})\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div id = \"grid\">\r\n                {\r\n                    this.state.Grid.map((grid, index) => {\r\n                        if(index % 4 === 0 && index !== 0){\r\n                            return <span><GridBox id = {this.state.Grid[index].id} clicked={()=> this.clicked(this.state.Grid[index].id)} /><br/></span>\r\n                        } else {\r\n                            return <span><GridBox id = {this.state.Grid[index].id} clicked={()=> this.clicked(this.state.Grid[index].id)} /></span>\r\n                        }\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Grid","import React from 'react';\nimport './App.css';\nimport Grid from './components/Grid/index'\n\nfunction App() {\n  return (\n    <div>\n      <Grid />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}